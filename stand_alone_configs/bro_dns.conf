input {
  tcp {
    port => 5555
    type => "bro_dns"
  }
}


filter {
  
  
  csv {
    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","transaction_id","rtt","query","query_class","query_class_name","query_type","query_type_name","rcode","rcode_name","aa","tc","rd","ra","z","answers","ttls","rejected"]
  add_tag => bro_dns

  separator => " "
  }

    date {
      match => ["timestamp", "UNIX"]
      remove_field => [ "EventTime"]
    }
  

    mutate {
    add_tag => [ "bro"]
    }

#POST PROCESSING
    if [type] == "bro_dns" {
    mutate {
      replace => { "type" => "dns" }
    }
  }
  if [type] == "dns" {
    # Used for whois lookups - can create log loop
    if [query] =~ "^whois\." {
      drop { }
    }
    # REPLACE test.int with your internal domain
    if [query] and [query] !~ "\.test\.int$" {
      mutate {
        lowercase => [ "query" ]
      }
      if [query_type_name] != "NB" and [query_type_name] != "TKEY" and [query_type_name] != "NBSTAT" and [query_type_name] != "PTR" {
        tld {
          source => "query"
        }
        ruby {
          code => "event['query_length'] = event['query'].length"
        }
        mutate {
          rename => { "[SubLog][sessionid]" => "sub_session_id" }
          rename => { "[tld][domain]" => "highest_registered_domain" }
          rename => { "[tld][trd]" => "subdomain" }
          rename => { "[tld][tld]" => "top_level_domain" }
          rename => { "[tld][sld]" => "parent_domain" }
        }
        if [parent_domain] {
          ruby {
            code => "event['parent_domain_length'] = event['parent_domain'].length"
          }
        }
        if [subdomain] {
          ruby {
            code => "event['subdomain_length'] = event['subdomain'].length"
          }
        }
      }
    }
  mutate {
    #add_tag => [ "conf_file_8006"]
  }
  }
  
#POSTPROCESS alexa
 if [type] == "dns" {
    if [highest_registered_domain] {
      rest {
        request => {
          url => "http://localhost:20000/alexa/%{highest_registered_domain}"
        }
        sprintf => true
        json => false
        target => "site"
      }
      if [site] != "0" and [site] {
        mutate {
          add_tag => [ "top-1m" ]
          remove_field => [ "site" ]
        }
      }
    }
  }

#POSTPROCESS dns creastion date

if [type] == "dns" {
    if [highest_registered_domain] and "top-1m" not in [tags] {
      rest {
        request => {
          url => "http://localhost:20000/domain/creation_date/%{highest_registered_domain}"
        }
        sprintf => true
        json => false
        target => "creation_date"
      }
      if [creation_date] =~ "No whois" {
        mutate { remove_field => [ "creation_date" ] }
      }
      if [creation_date] and [creation_date] != "" {
        grok {
          match => { "creation_date" => "(?<modified_creation_date>[12][0-9]{3}-[01][0-9]-[0-3][0-9])" }
          remove_field => [ "creation_date" ]
        }
        # Barebone creation_date - can be off by one day due to timezones
        date {
          match => [ "modified_creation_date", "yyyy-MM-dd" ]
          remove_field => [ "modified_creation_date" ]
          target => "creation_date"
        }
      }
      if [creation_date] == "" {
        mutate { remove_field => [ "creation_date" ] }
      }
    }
  }








}

output {
  elasticsearch {
    index => "bro"
  }
}

  
  
